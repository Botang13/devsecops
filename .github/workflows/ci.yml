name: CI - DevSecOps (Notes App)

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.12"
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/notes-app

jobs:
  unit_test:
    name: Unit Test (pytest)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then python -m pip install -r requirements.txt; fi
          if [ -f dev-requirements.txt ]; then python -m pip install -r dev-requirements.txt; fi

      - name: Run pytest
        run: |
          pytest -q

  sast_bandit:
    name: SAST (Bandit)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Bandit
        run: |
          python -m pip install --upgrade pip
          python -m pip install bandit

      - name: Run Bandit recursively (exclude tests)
        run: |
          bandit -r . -x tests -q

  sca_pip_audit:
    name: SCA (pip-audit)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install deps (for resolver)
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then python -m pip install -r requirements.txt; fi

      # Fail otomatis jika ada vulnerability; tanpa ignore.
      - name: Run pip-audit
        uses: pypa/gh-action-pip-audit@v1.1.0
        with:
          inputs: requirements.txt

  secret_scan:
    name: Secret Scan (Gitleaks)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Gitleaks akan fail jika ada secret bocor.
      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        with:
          args: detect --source=. --redact

  build_and_push:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: [unit_test, sast_bandit, sca_pip_audit, secret_scan]
    steps:
      - uses: actions/checkout@v4

      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Build image
        run: |
          docker build -t $IMAGE_NAME:latest .

      - name: Tag image with commit sha
        run: |
          docker tag $IMAGE_NAME:latest $IMAGE_NAME:${{ github.sha }}

      - name: Push images
        run: |
          docker push $IMAGE_NAME:latest
          docker push $IMAGE_NAME:${{ github.sha }}

  trivy_scan:
    name: Image Scan (Trivy)
    runs-on: ubuntu-latest
    needs: [build_and_push]
    steps:
      - name: Login to Docker Hub (for rate limits)
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Trivy scan (CRITICAL,HIGH) on pushed image
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: ${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: 'table'
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
          ignore-unfixed: false
          exit-code: '1'  # fail jika ada temuan